@page "/photos"
@*@layout AuthorizedBase*@
@inject NavigationManager _navigation
@inject HttpClient HttpClient

<div class="photos s-row justify-space-between">

    <div class="photos-content s-col">

        <div class="photos-bar s-row align-items-center justify-space-between">

            <div class="s-col">
                <Breadcrumbs />

                <p class="font-header__l__bold light">Фотографии</p>
            </div>

            <div class="photos-buttons s-row align-items-center">

                <div class="photos-sorts s-row">

                    <a href="@(_navigation.Uri)#sort-platforms">
                        <p class="font-header__xs__regular light s-row">
                            <span>все площадки</span>
                            <img src="images/arrow-down.svg"/>
                        </p>
                    </a>

                    <a href="@(_navigation.Uri)#sort-date">
                        <p class="font-header__xs__regular light s-row">
                            <span>сначала новые</span>
                            <img src="images/arrow-down.svg"/>
                        </p>
                    </a>

                </div>

                <div class="photos-views s-row">

                    <a href="@(_navigation.Uri)#view-rows">
                        <p>
                            <img src="images/view-rows.svg"/>
                        </p>
                    </a>

                    <a href="@(_navigation.Uri)#view-web">
                        <p>
                            <img src="images/view-web.svg"/>
                        </p>
                    </a>

                    <a href="@(_navigation.Uri)#view-grid">
                        <p>
                            <img src="images/view-grid.svg"/>
                        </p>
                    </a>

                </div>

            </div>

        </div>

    </div>

    <div class="dates-bar">
        <img src="images/dates-bar.svg">
    </div>

</div>

@code
{
        protected override async Task OnAfterRenderAsync(bool firstRenderer)
        {
#if DEBUG
            await Task.Delay(5000);
#endif

        if (firstRenderer)
        {
            try
            {
                var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/photos/dude?start={0}&end={40}");
                var responseMessage = await HttpClient.SendAsync(requestMessage);
                if (!responseMessage.IsSuccessStatusCode)
                {
                    var images = JsonConvert.DeserializeObject<IEnumerable<string>>(await responseMessage.Content.ReadAsStringAsync());
                    StateHasChanged();
                }
            }
            catch
            {

            }
        }
        await base.OnAfterRenderAsync(firstRenderer);
    }
}